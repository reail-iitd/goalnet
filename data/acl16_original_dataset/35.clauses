entire sentence: , Take coffee from the container   ,  Pour coffee to the mug   ,  Take   the spoon scoop the ice cream   , ,  Put the ice cream in the mug   ,  Pour syrup on the ice cream   

<start clause>
start env: 0
end env: -1
sent: Take coffee from the container  
clause dscr: Take [   coffee |   container | relation: (2, 2){ coffee x  container -> from} ]
words: Take coffee container from
verb: Take
arg mapping: (coffee,Mug_1) (coffee,LongCup_1) (container,Spoon_1) (container,Glass_1) (container,LongCup_1) (container,LongCup_2)
<end clause>

<start clause>
start env: 2
end env: 1
sent:  . Pour coffee to the mug  
clause dscr: Pour [   coffee |   mug | relation: (2, 2){ coffee x  mug -> to} ]
words: Pour coffee mug to
verb: Pour
arg mapping: (coffee,Mug_1) (coffee,LongCup_1) (mug,Mug_1)
<end clause>

<start clause>
start env: 5
end env: 4
sent:  . Take  
clause dscr: Take [ relation: Null ]
words: Take
verb: Take
arg mapping: 
<end clause>

<start clause>
start env: 3
end env: 9
sent:  the spoon scoop the ice cream  
clause dscr: scoop [   spoon |   ice cream | relation: (2, 2) ]
words: scoop spoon ice cream
verb: scoop
arg mapping: (spoon,Spoon_1) (ice cream,IceCream_1)
<end clause>

<start clause>
start env: 10
end env: 13
sent:  . Put the ice cream in the mug  
clause dscr: Put [   ice |   cream |   mug | relation: (3, 3){ ice x  cream -> in}{ ice x  mug -> in}{ cream x  mug -> in} ]
words: Put ice cream mug in in in
verb: Put
arg mapping: (ice,IceCream_1) (ice,IceCreamScoop) (cream,IceCream_1) (cream,IceCreamScoop) (mug,Mug_1)
<end clause>

<start clause>
start env: 15
end env: 21
sent:  . Pour syrup on the ice cream  
clause dscr: Pour [   syrup |   ice cream | relation: (2, 2){ syrup x  ice cream -> on} ]
words: Pour syrup ice cream on
verb: Pour
arg mapping: (syrup,Syrup_1) (syrup,Syrup_2) (ice cream,IceCream_1)
<end clause>
